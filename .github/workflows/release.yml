# SPDX-License-Identifier: MIT OR Apache-2.0
name: Release

on:
  # Manual trigger
  workflow_dispatch: {}
  # Auto-publish when you push a semver tag like v0.1.1
  push:
    tags:
      - "v*.*.*"

env:
  CARGO_TERM_COLOR: always
  # Faster index access
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  mock-tests:
    name: Mock tests (no liboqs)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-mock-${{ hashFiles('**/Cargo.lock') }}
      - name: Test (features: kyber768,dilithium2)
        run: cargo test --no-default-features --features kyber768,dilithium2

  liboqs-ubuntu:
    name: Real liboqs (Ubuntu)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-liboqs-${{ hashFiles('**/Cargo.lock') }}
      - name: Build & install liboqs
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake pkg-config libssl-dev
          rm -rf liboqs
          git clone --depth 1 https://github.com/open-quantum-safe/liboqs
          cd liboqs && mkdir build && cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$HOME/.local/liboqs" ..
          ninja && ninja install
          PKG_CONFIG_PATH="$HOME/.local/liboqs/lib/pkgconfig" pkg-config --modversion liboqs
      - name: Test (real liboqs)
        env:
          LIBOQS_DIR: $HOME/.local/liboqs
          PKG_CONFIG_PATH: $HOME/.local/liboqs/lib/pkgconfig
          LD_LIBRARY_PATH: $HOME/.local/liboqs/lib
        run: |
          cargo test --no-default-features --features liboqs,kyber768,dilithium2
          cargo run --example kem_roundtrip --no-default-features --features liboqs,kyber768
          cargo run --example dsa_sign_verify --no-default-features --features liboqs,dilithium2

  liboqs-macos:
    name: Real liboqs (macOS)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.cargo
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-liboqs-${{ hashFiles('**/Cargo.lock') }}
      - name: Build & install liboqs
        run: |
          brew install ninja cmake pkg-config openssl@3
          rm -rf liboqs
          git clone --depth 1 https://github.com/open-quantum-safe/liboqs
          cd liboqs && mkdir build && cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$HOME/.local/liboqs" -DOPENSSL_ROOT_DIR="$(brew --prefix openssl@3)" ..
          ninja && ninja install
          PKG_CONFIG_PATH="$HOME/.local/liboqs/lib/pkgconfig" pkg-config --modversion liboqs
      - name: Test (real liboqs)
        env:
          LIBOQS_DIR: $HOME/.local/liboqs
          PKG_CONFIG_PATH: $HOME/.local/liboqs/lib/pkgconfig
          DYLD_LIBRARY_PATH: $HOME/.local/liboqs/lib
        run: |
          cargo test --no-default-features --features liboqs,kyber768,dilithium2
          cargo run --example kem_roundtrip --no-default-features --features liboqs,kyber768
          cargo run --example dsa_sign_verify --no-default-features --features liboqs,dilithium2

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [mock-tests, liboqs-ubuntu, liboqs-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    # Required for Trusted Publishing (OIDC)
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish
        run: cargo publish --locked
